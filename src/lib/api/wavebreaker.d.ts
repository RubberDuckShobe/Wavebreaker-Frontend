/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Start login */
        get: operations["auth_login"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return after Steam login */
        get: operations["auth_return"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get player rankings */
        get: operations["get_player_rankings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the player that is currently logged in */
        get: operations["get_self"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/players/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get player by ID */
        get: operations["get_player"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rivals/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add rival */
        post: operations["add_rival"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rivals/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove rival */
        delete: operations["remove_rival"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rivals/self": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get own rivals */
        get: operations["get_own_rivals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for scores */
        get: operations["get_scores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scores/rivals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get rivals' scores */
        get: operations["get_rival_scores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scores/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get score by ID */
        get: operations["get_score"];
        put?: never;
        post?: never;
        /** Delete score by ID */
        delete: operations["delete_score"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shouts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete shout by ID */
        delete: operations["delete_shout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/radio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get radio songs */
        get: operations["get_radio_songs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/rankings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get global most played songs */
        get: operations["get_top_songs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get song by ID */
        get: operations["get_song"];
        put?: never;
        post?: never;
        /** Delete song by ID */
        delete: operations["delete_song"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/{id}/extraInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Manually update song extra info */
        put: operations["update_song_extra_info"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/{id}/extraInfoByMbid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update song extra info by MBID */
        put: operations["update_song_extra_info_mbid"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/{id}/scores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get song's scores */
        get: operations["get_song_scores"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/songs/{id}/shouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get song's shouts */
        get: operations["get_song_shouts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get server stats */
        get: operations["stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Represents the type of account a player has.
         *
         *     0 = User, 1 = Moderator, 2 = Wavebreaker Team
         * @enum {integer}
         */
        AccountType: 0 | 1 | 2;
        /** @description Wrapper for jwt crate's AuthBody because it doesn't implement ToSchema */
        AuthBodySchema: {
            access_token: string;
            token_type: string;
        };
        /**
         * @description Represents a character/vehicle in the game.
         * @enum {integer}
         */
        Character: 0 | 1 | 2 | 3 | 4 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17;
        /** @description Used for storing additional metadata from [MusicBrainz](https://musicbrainz.org).
         *     This lets us display fancy stuffâ„¢ on the song page. */
        ExtraSongInfo: {
            /** @description Alternative artist tags that can be matched to this song */
            aliasesArtist?: (string | null)[] | null;
            /** @description Alternative title tags that can be matched to this song */
            aliasesTitle?: (string | null)[] | null;
            coverUrl?: string | null;
            coverUrlSmall?: string | null;
            /** Format: int32 */
            id: number;
            mbid?: string | null;
            /** @description For songs that have been mistagged by the automatic lookup.
             *     A value of `true` prevents any new metadata lookups by title */
            mistagLock: boolean;
            musicbrainzArtist?: string | null;
            /** Format: int32 */
            musicbrainzLength?: number | null;
            musicbrainzTitle?: string | null;
            /** Format: int32 */
            songId: number;
        };
        FavoriteCharacter: {
            character: components["schemas"]["Character"];
            /** Format: int64 */
            timesUsed: number;
        };
        /**
         * @description Represents the three skill levels represented on the leaderboard.
         * @enum {integer}
         */
        League: 0 | 1 | 2;
        MbidRefreshBody: {
            recording_mbid: string;
            release_mbid?: string | null;
        };
        ModifyRivalRequest: {
            /** Format: int32 */
            rivalId: number;
        };
        /** @description Used for inserting additional metadata from [MusicBrainz](https://musicbrainz.org). */
        NewExtraSongInfo: {
            aliasesArtist?: string[] | null;
            aliasesTitle?: string[] | null;
            coverUrl?: string | null;
            coverUrlSmall?: string | null;
            mbid?: string | null;
            musicbrainzArtist?: string | null;
            /** Format: int32 */
            musicbrainzLength?: number | null;
            musicbrainzTitle?: string | null;
            /** Format: int32 */
            songId: number;
        };
        PlayerPublic: {
            accountType: components["schemas"]["AccountType"];
            avatarUrl: string;
            /** Format: int32 */
            id: number;
            /** Format: date-time */
            joinedAt: string;
            username: string;
        };
        PlayerRankingResponse: {
            results: components["schemas"]["PlayerWithRanking"][];
            /** Format: int64 */
            total: number;
        };
        PlayerResponse: components["schemas"]["PlayerPublic"] & {
            stats?: null | components["schemas"]["PlayerStats"];
        };
        PlayerStats: {
            favoriteCharacter?: null | components["schemas"]["FavoriteCharacter"];
            /** Format: int32 */
            rank: number;
            /** Format: int32 */
            skillPoints: number;
            /** Format: int32 */
            totalPlays: number;
        };
        PlayerWithRanking: {
            player: components["schemas"]["PlayerPublic"];
            /** Format: int32 */
            skillPoints: number;
        };
        RadioSongResponse: {
            external_url: string;
            extra_info?: null | components["schemas"]["ExtraSongInfo"];
            song: components["schemas"]["Song"];
        };
        RivalryResponse: {
            rivalries: components["schemas"]["RivalryView"][];
        };
        RivalryView: {
            /** Format: date-time */
            establishedAt: string;
            rival: components["schemas"]["PlayerPublic"];
        };
        Score: {
            /** Format: int32 */
            density: number;
            /** @description Bonuses like Clean Finish, Seeing Red, etc. */
            feats: (string | null)[];
            /** Format: int32 */
            gold_threshold: number;
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            isj: number;
            /** Format: int32 */
            iss: number;
            league: components["schemas"]["League"];
            /** Format: int32 */
            play_count: number;
            /** Format: int32 */
            player_id: number;
            /** Format: int32 */
            score: number;
            /** Format: int32 */
            song_id: number;
            /** Format: int32 */
            song_length: number;
            /** Format: date-time */
            submitted_at: string;
            track_shape: (number | null)[];
            vehicle: components["schemas"]["Character"];
            /** @description Extra data about the play with meaning depending on the character used, sent by the game as a string of x-seperated numbers */
            xstats: (number | null)[];
        };
        ScoreSearchResponse: {
            results: components["schemas"]["ScoreSearchResult"][];
            /** Format: int64 */
            total: number;
        };
        ScoreSearchResult: components["schemas"]["Score"] & {
            extra_info?: null | components["schemas"]["ExtraSongInfo"];
            player?: null | components["schemas"]["PlayerPublic"];
            song?: null | components["schemas"]["Song"];
        };
        ServerStats: {
            /** Format: int64 */
            scoreCount: number;
            /** Format: int64 */
            songCount: number;
            /** Format: int64 */
            userCount: number;
        };
        /** @description Route error with only an error message. */
        SimpleRouteErrorOutput: {
            error: string;
        };
        Song: {
            artist: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: int32 */
            id: number;
            modifiers?: (string | null)[] | null;
            title: string;
        };
        SongResponse: components["schemas"]["Song"] & {
            extraInfo?: null | components["schemas"]["ExtraSongInfo"];
        };
        /**
         * @description General type used to specify sort order
         * @enum {string}
         */
        SortType: "asc" | "desc";
        TopSongResponse: {
            song_data: components["schemas"]["SongResponse"];
            /** Format: int64 */
            times_played: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to Steam */
            308: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    auth_return: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthBodySchema"];
                };
            };
            /** @description OpenID verification failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Profile not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_player_rankings: {
        parameters: {
            query?: {
                /** @description Page number */
                page?: number;
                /** @description Page size */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerRankingResponse"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_self: {
        parameters: {
            query?: {
                /** @description Include player's stats */
                includeStats?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerPublic"];
                };
            };
            /** @description Not logged in or invalid token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_player: {
        parameters: {
            query?: {
                /** @description Include player's stats */
                withStats?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of player to get */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerResponse"];
                };
            };
            /** @description Player not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    add_rival: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyRivalRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RivalryView"];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Couldn't find player to rival */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Rivalry already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    remove_rival: {
        parameters: {
            query: {
                /** @description ID of player to un-rival */
                rivalId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ModifyRivalRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Couldn't find player to un-rival or they aren't a rival */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_own_rivals: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RivalryResponse"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_scores: {
        parameters: {
            query?: {
                /** @description Include player info */
                withPlayer?: boolean;
                /** @description Include song info */
                withSong?: boolean;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                pageSize?: number;
                /** @description Sort by submission time */
                timeSort?: components["schemas"]["SortType"];
                /** @description Sort by score */
                scoreSort?: components["schemas"]["SortType"];
                /** @description League to filter by */
                league?: components["schemas"]["League"];
                /** @description Character to filter by */
                character?: components["schemas"]["Character"];
                /** @description Player ID to filter by */
                playerId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoreSearchResponse"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_rival_scores: {
        parameters: {
            query?: {
                /** @description Include player info */
                withPlayer?: boolean;
                /** @description Include song info */
                withSong?: boolean;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                pageSize?: number;
                /** @description Sort by submission time */
                timeSort?: components["schemas"]["SortType"];
                /** @description Sort by score */
                scoreSort?: components["schemas"]["SortType"];
                /** @description League to filter by */
                league?: components["schemas"]["League"];
                /** @description Character to filter by */
                character?: components["schemas"]["Character"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoreSearchResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_score: {
        parameters: {
            query?: {
                /** @description Include player info */
                withPlayer?: boolean;
                /** @description Include song info */
                withSong?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of score to get */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScoreSearchResult"];
                };
            };
            /** @description Score not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    delete_score: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of score to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Score not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    delete_shout: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of shout to delete */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Shout not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_radio_songs: {
        parameters: {
            query?: {
                /** @description Include extra info */
                withExtraInfo?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RadioSongResponse"][];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_top_songs: {
        parameters: {
            query?: {
                /** @description Include extra info */
                withExtraInfo?: boolean;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopSongResponse"][];
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_song: {
        parameters: {
            query: {
                /** @description Include extra info */
                withExtraInfo: boolean;
            };
            header?: never;
            path: {
                /** @description ID of song to get */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SongResponse"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    delete_song: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of song to get */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    update_song_extra_info: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of song to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewExtraSongInfo"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    update_song_extra_info_mbid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of song to update */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MbidRefreshBody"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_song_scores: {
        parameters: {
            query?: {
                /** @description Include player info */
                withPlayer?: boolean;
                /** @description Page number */
                page?: number;
                /** @description Page size */
                pageSize?: number;
                /** @description League to filter by */
                league?: components["schemas"]["League"];
                /** @description Character to filter by */
                character?: components["schemas"]["Character"];
                /** @description Player ID to filter by */
                playerId?: number;
            };
            header?: never;
            path: {
                /** @description ID of song to get */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SongResponse"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    get_song_shouts: {
        parameters: {
            query: {
                /** @description Page number */
                page: number;
                /** @description Page size */
                pageSize: number;
            };
            header?: never;
            path: {
                /** @description ID of song to get */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SongResponse"];
                };
            };
            /** @description Song not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
    stats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerStats"];
                };
            };
            /** @description Miscellaneous error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimpleRouteErrorOutput"];
                };
            };
        };
    };
}
